library(quantmod)
library(tidyquant)
library(lubridate)
theme_set(theme_minimal())
# --------------------- BITCOIN ---------------------
# Get the bitcoin data
bitcoin <- read_xlsx("Bitcoin.xlsx", 2) %>%
clean_names() %>%                                         # Clean names
mutate(log_return = c(diff(log(closeprice)), NA))
# Separate out log return
bitcoin_log_return <- bitcoin %>%
select(date, log_return) %>%
filter(log_return != "NA",
log_return != 0) %>%
mutate(neg_log_return = -log_return,
perc_loss = 100*(1-exp(log_return)),
neg_perc_loss = -perc_loss)
# See https://rstudio-pubs-static.s3.amazonaws.com/78839_afca73ae18194eaf8f1b86d399dde969.html for a possible solution
# Store as a ts object for time series
# --------------------- OMXS30 ---------------------
omxs30 <- read_xlsx("OMXS3020y.xlsx", 3) %>%
clean_names() %>%                                         # Clean names
mutate(log_return = c(diff(log(closeprice)), NA))
omxs30_log_return <- omxs30 %>%
select(date, log_return) %>%
filter(log_return != "NA",
log_return != 0) %>%
mutate(neg_log_return = -log_return,
perc_loss = 100*(1-exp(log_return)),
neg_perc_loss = -perc_loss)
# Store as a ts object for time series
# --------------------- Brent Crude ---------------------
brent_crude <- read_xlsx("LCOc1-Brent Crude.xlsx", 2) %>%
clean_names() %>%                                         # Clean names
mutate(log_return = c(diff(log(closeprice)), NA))
brent_crude_log_return <- brent_crude %>%
select(date, log_return) %>%
filter(log_return != "NA",
log_return != 0) %>%
mutate(neg_log_return = -log_return,
perc_loss = 100*(1-exp(log_return)),
neg_perc_loss = -perc_loss)
# --------------------- SEK/EUR ---------------------
sek_eur <- read_xlsx("SEKEUR-SEK_EUR.xlsx", 2) %>%
clean_names() %>%                                         # Clean names
mutate(log_return = c(diff(log(closeprice)), NA))
sek_eur_log_return <- sek_eur %>%
select(date, log_return) %>%
filter(log_return != "NA",
log_return != 0) %>%
mutate(neg_log_return = -log_return,
perc_loss = 100*(1-exp(log_return)),
neg_perc_loss = -perc_loss)
# --------------------- US 10 year treasury ---------------------
#t10y <- getSymbols(Symbols = "DGS10", src = "FRED", auto.assign = #FALSE)
#t10yd <- data.frame(date = index(t10y), coredata(t10y))
#treasury <- t10yd %>%
#  rename("price" = "DGS10") %>%
#  filter(date >= "2001-04-23" & date <= "2021-04-23") %>%
#  mutate(log_return = c(diff(log(price)), NA))
#treasury_log_return <- treasury %>%
#  select(date, log_return) %>%
#  filter(log_return != "NA",
#         log_return != 0) %>%
#  mutate(neg_log_return = -log_return,
#         perc_loss = 100*(1-exp(log_return)),
#         neg_perc_loss = -perc_loss)
treasury <- read_xlsx("OMRXBOND.xlsx") %>%
rename("price" = "close") %>%
filter(date <= "2021-04-23") %>%
mutate(price = as.numeric(price),
log_return = c(diff(log(price)), NA))
treasury_log_return <- treasury %>%
select(date, log_return) %>%
filter(log_return != "NA",
log_return != 0) %>%
mutate(neg_log_return = -log_return,
perc_loss = 100*(1-exp(log_return)),
neg_perc_loss = -perc_loss)
### CALCULATING ES FOR EACH SERIES #############################################
### Load package
library(evir)
### Set the confidence levels ##################################################
alpha <- c(0.99, 0.995, 0.999)
### 1. Calculate ES for OMXS30 #################################################
out_omxs30 <- gpd(omxs30_log_return$perc_loss, omxs30_threshold)
es_omxs30 <- riskmeasures(out_omxs30, alpha)
tp_omxs30 <- tailplot(out_omxs30)
ci_99_omxs30 <- gpd.sfall(tp_omxs30, alpha[1])
ci_995_omxs30 <- gpd.sfall(tp_omxs30, alpha[2])
ci_999_omxs30 <- gpd.sfall(tp_omxs30, alpha[3])
### 2. Calculate ES for Bitcoin ################################################
out_bitcoin <- gpd(bitcoin_log_return$perc_loss, bitcoin_threshold)
es_bitcoin <- riskmeasures(out_bitcoin, alpha)
tp_bitcoin <- tailplot(out_bitcoin)
ci_99_bitcoin <- gpd.sfall(tp_bitcoin, alpha[1])
ci_995_bitcoin <- gpd.sfall(tp_bitcoin, alpha[2])
ci_999_bitcoin <- gpd.sfall(tp_bitcoin, alpha[3])
### 3. Calculate ES for Brent crude ############################################
out_brent <- gpd(brent_crude_log_return$perc_loss, brent_threshold)
es_brent <- riskmeasures(out_brent, alpha)
tp_brent <- tailplot(out_brent)
ci_99_brent <- gpd.sfall(tp_brent, alpha[1])
ci_995_brent <- gpd.sfall(tp_brent, alpha[2])
ci_999_brent <- gpd.sfall(tp_brent, alpha[3])
### 4. Calculate ES for SEK/EUR ################################################
out_sek <- gpd(sek_eur_log_return$perc_loss, sek_eur_threshold)
es_sek_eur <- riskmeasures(out_sek, alpha)
tp_sek <- tailplot(out_sek)
ci_99_sek <- gpd.sfall(tp_sek, alpha[1])
ci_995_sek <- gpd.sfall(tp_sek, alpha[2])
ci_999_sek <- gpd.sfall(tp_sek, alpha[3])
### 5. Calculate ES for Treasury ###############################################
out_treasury <- gpd(treasury_log_return$perc_loss, treasury_threshold_subsequent)
es_treasury <- riskmeasures(out_treasury, alpha)
tp_treasury <- tailplot(out_treasury)
ci_99_treasury <- gpd.sfall(tp_treasury, alpha[1])
ci_995_treasury <- gpd.sfall(tp_treasury, alpha[2])
ci_999_treasury <- gpd.sfall(tp_treasury, alpha[3])
library(qrmtools)
### FITTING A GPD TO EACH SERIES ###############################################
### Set the thresholds based on mean excess plots ##############################
omxs30_threshold <- 1
bitcoin_threshold <- 0.25
brent_threshold <- 2.3
sek_eur_threshold <- 0.82
treasury_threshold <- 2.25
treasury_threshold_subsequent <- 0.25
### 1. Fit a GPD to OMXS30 excesses ############################################
exceed_omxs30 <- omxs30_log_return$perc_loss[omxs30_log_return$perc_loss > omxs30_threshold] # exceedances
excess_omxs30 <- exceed_omxs30 - omxs30_threshold # excesses
(fit_omxs30 <- fit_GPD_MLE(excess_omxs30)) # MLE
shape.u_omxs30 <- fit_omxs30$par[["shape"]]
scale.u_omxs30 <- fit_omxs30$par[["scale"]]
### 2. Fit a GPD to Bitcoin excesses ###########################################
exceed_bitcoin <- bitcoin_log_return$perc_loss[bitcoin_log_return$perc_loss > bitcoin_threshold] # exceedances
excess_bitcoin <- exceed_bitcoin - bitcoin_threshold # excesses
(fit_bitcoin <- fit_GPD_MLE(excess_bitcoin)) # MLE
shape.u_bitcoin <- fit_bitcoin$par[["shape"]]
scale.u_bitcoin <- fit_bitcoin$par[["scale"]]
### 3. Fit a GPD to Brent crude excesses #######################################
exceed_brent <- brent_crude_log_return$perc_loss[brent_crude_log_return$perc_loss > brent_threshold] # exceedances
excess_brent <- exceed_brent - brent_threshold # excesses
(fit_brent <- fit_GPD_MLE(excess_brent)) # MLE
shape.u_brent <- fit_brent$par[["shape"]]
scale.u_brent <- fit_brent$par[["scale"]]
### 4. Fit a GPD to SEK/EUR excesses #######################################
exceed_sek_eur <- sek_eur_log_return$perc_loss[sek_eur_log_return$perc_loss > sek_eur_threshold] # exceedances
excess_sek_eur <- exceed_sek_eur - sek_eur_threshold # excesses
(fit_sek_eur <- fit_GPD_MLE(excess_sek_eur)) # MLE
shape.u_sek_eur <- fit_sek_eur$par[["shape"]]
scale.u_sek_eur <- fit_sek_eur$par[["scale"]]
### 5. Fit a GPD to Treasury excesses #######################################
exceed_treasury <- treasury_log_return$perc_loss[treasury_log_return$perc_loss > treasury_threshold_subsequent] # exceedances
excess_treasury <- exceed_treasury - treasury_threshold_subsequent # excesses
(fit_treasury <- fit_GPD_MLE(excess_treasury)) # MLE
shape.u_treasury <- fit_treasury$par[["shape"]]
scale.u_treasury <- fit_treasury$par[["scale"]]
### CALCULATING ES FOR EACH SERIES #############################################
### Load package
library(evir)
### Set the confidence levels ##################################################
alpha <- c(0.99, 0.995, 0.999)
### 1. Calculate ES for OMXS30 #################################################
out_omxs30 <- gpd(omxs30_log_return$perc_loss, omxs30_threshold)
es_omxs30 <- riskmeasures(out_omxs30, alpha)
tp_omxs30 <- tailplot(out_omxs30)
ci_99_omxs30 <- gpd.sfall(tp_omxs30, alpha[1])
ci_995_omxs30 <- gpd.sfall(tp_omxs30, alpha[2])
ci_999_omxs30 <- gpd.sfall(tp_omxs30, alpha[3])
### 2. Calculate ES for Bitcoin ################################################
out_bitcoin <- gpd(bitcoin_log_return$perc_loss, bitcoin_threshold)
es_bitcoin <- riskmeasures(out_bitcoin, alpha)
tp_bitcoin <- tailplot(out_bitcoin)
ci_99_bitcoin <- gpd.sfall(tp_bitcoin, alpha[1])
ci_995_bitcoin <- gpd.sfall(tp_bitcoin, alpha[2])
ci_999_bitcoin <- gpd.sfall(tp_bitcoin, alpha[3])
### 3. Calculate ES for Brent crude ############################################
out_brent <- gpd(brent_crude_log_return$perc_loss, brent_threshold)
es_brent <- riskmeasures(out_brent, alpha)
tp_brent <- tailplot(out_brent)
ci_99_brent <- gpd.sfall(tp_brent, alpha[1])
ci_995_brent <- gpd.sfall(tp_brent, alpha[2])
ci_999_brent <- gpd.sfall(tp_brent, alpha[3])
### 4. Calculate ES for SEK/EUR ################################################
out_sek <- gpd(sek_eur_log_return$perc_loss, sek_eur_threshold)
es_sek_eur <- riskmeasures(out_sek, alpha)
tp_sek <- tailplot(out_sek)
ci_99_sek <- gpd.sfall(tp_sek, alpha[1])
ci_995_sek <- gpd.sfall(tp_sek, alpha[2])
ci_999_sek <- gpd.sfall(tp_sek, alpha[3])
### 5. Calculate ES for Treasury ###############################################
out_treasury <- gpd(treasury_log_return$perc_loss, treasury_threshold_subsequent)
es_treasury <- riskmeasures(out_treasury, alpha)
tp_treasury <- tailplot(out_treasury)
ci_99_treasury <- gpd.sfall(tp_treasury, alpha[1])
ci_995_treasury <- gpd.sfall(tp_treasury, alpha[2])
ci_999_treasury <- gpd.sfall(tp_treasury, alpha[3])
ci_99_treasury
format(ci_999_treasury[3], digits =3, nsmall = 2)
format(ci_99_treasury[3], digits =3, nsmall = 2)
format(ci_99_treasury[3], digits =3, nsmall = 3)
format(ci_99_treasury[3], digits =2, nsmall = 2)
citation(package = "evir")
citation(package = "qrmtools")
library(tidyverse)
library(forecast)
library(scales)
library(readxl)
library(janitor)
library(quantmod)
library(tidyquant)
library(lubridate)
theme_set(theme_minimal())
# --------------------- BITCOIN ---------------------
# Get the bitcoin data
bitcoin <- read_xlsx("Bitcoin.xlsx", 2) %>%
clean_names() %>%                                         # Clean names
mutate(log_return = c(diff(log(closeprice)), NA))
# Separate out log return
bitcoin_log_return <- bitcoin %>%
select(date, log_return) %>%
filter(log_return != "NA",
log_return != 0) %>%
mutate(neg_log_return = -log_return,
perc_loss = 100*(1-exp(log_return)),
neg_perc_loss = -perc_loss)
# See https://rstudio-pubs-static.s3.amazonaws.com/78839_afca73ae18194eaf8f1b86d399dde969.html for a possible solution
# Store as a ts object for time series
# --------------------- OMXS30 ---------------------
omxs30 <- read_xlsx("OMXS3020y.xlsx", 3) %>%
clean_names() %>%                                         # Clean names
mutate(log_return = c(diff(log(closeprice)), NA))
omxs30_log_return <- omxs30 %>%
select(date, log_return) %>%
filter(log_return != "NA",
log_return != 0) %>%
mutate(neg_log_return = -log_return,
perc_loss = 100*(1-exp(log_return)),
neg_perc_loss = -perc_loss)
# Store as a ts object for time series
# --------------------- Brent Crude ---------------------
brent_crude <- read_xlsx("LCOc1-Brent Crude.xlsx", 2) %>%
clean_names() %>%                                         # Clean names
mutate(log_return = c(diff(log(closeprice)), NA))
brent_crude_log_return <- brent_crude %>%
select(date, log_return) %>%
filter(log_return != "NA",
log_return != 0) %>%
mutate(neg_log_return = -log_return,
perc_loss = 100*(1-exp(log_return)),
neg_perc_loss = -perc_loss)
# --------------------- SEK/EUR ---------------------
sek_eur <- read_xlsx("SEKEUR-SEK_EUR.xlsx", 2) %>%
clean_names() %>%                                         # Clean names
mutate(log_return = c(diff(log(closeprice)), NA))
sek_eur_log_return <- sek_eur %>%
select(date, log_return) %>%
filter(log_return != "NA",
log_return != 0) %>%
mutate(neg_log_return = -log_return,
perc_loss = 100*(1-exp(log_return)),
neg_perc_loss = -perc_loss)
# --------------------- US 10 year treasury ---------------------
#t10y <- getSymbols(Symbols = "DGS10", src = "FRED", auto.assign = #FALSE)
#t10yd <- data.frame(date = index(t10y), coredata(t10y))
#treasury <- t10yd %>%
#  rename("price" = "DGS10") %>%
#  filter(date >= "2001-04-23" & date <= "2021-04-23") %>%
#  mutate(log_return = c(diff(log(price)), NA))
#treasury_log_return <- treasury %>%
#  select(date, log_return) %>%
#  filter(log_return != "NA",
#         log_return != 0) %>%
#  mutate(neg_log_return = -log_return,
#         perc_loss = 100*(1-exp(log_return)),
#         neg_perc_loss = -perc_loss)
treasury <- read_xlsx("OMRXBOND.xlsx") %>%
rename("price" = "close") %>%
filter(date <= "2021-04-23") %>%
mutate(price = as.numeric(price),
log_return = c(diff(log(price)), NA))
treasury_log_return <- treasury %>%
select(date, log_return) %>%
filter(log_return != "NA",
log_return != 0) %>%
mutate(neg_log_return = -log_return,
perc_loss = 100*(1-exp(log_return)),
neg_perc_loss = -perc_loss)
library(evir)
gpd(brent_crude_log_return$perc_loss)
library(qrmtools)
### FITTING A GPD TO EACH SERIES ###############################################
### Set the thresholds based on mean excess plots ##############################
omxs30_threshold <- 1
bitcoin_threshold <- 0.25
brent_threshold <- 2.3
sek_eur_threshold <- 0.82
treasury_threshold <- 2.25
treasury_threshold_subsequent <- 0.25
### 1. Fit a GPD to OMXS30 excesses ############################################
exceed_omxs30 <- omxs30_log_return$perc_loss[omxs30_log_return$perc_loss > omxs30_threshold] # exceedances
excess_omxs30 <- exceed_omxs30 - omxs30_threshold # excesses
(fit_omxs30 <- fit_GPD_MLE(excess_omxs30)) # MLE
shape.u_omxs30 <- fit_omxs30$par[["shape"]]
scale.u_omxs30 <- fit_omxs30$par[["scale"]]
### 2. Fit a GPD to Bitcoin excesses ###########################################
exceed_bitcoin <- bitcoin_log_return$perc_loss[bitcoin_log_return$perc_loss > bitcoin_threshold] # exceedances
excess_bitcoin <- exceed_bitcoin - bitcoin_threshold # excesses
(fit_bitcoin <- fit_GPD_MLE(excess_bitcoin)) # MLE
shape.u_bitcoin <- fit_bitcoin$par[["shape"]]
scale.u_bitcoin <- fit_bitcoin$par[["scale"]]
### 3. Fit a GPD to Brent crude excesses #######################################
exceed_brent <- brent_crude_log_return$perc_loss[brent_crude_log_return$perc_loss > brent_threshold] # exceedances
excess_brent <- exceed_brent - brent_threshold # excesses
(fit_brent <- fit_GPD_MLE(excess_brent)) # MLE
shape.u_brent <- fit_brent$par[["shape"]]
scale.u_brent <- fit_brent$par[["scale"]]
### 4. Fit a GPD to SEK/EUR excesses #######################################
exceed_sek_eur <- sek_eur_log_return$perc_loss[sek_eur_log_return$perc_loss > sek_eur_threshold] # exceedances
excess_sek_eur <- exceed_sek_eur - sek_eur_threshold # excesses
(fit_sek_eur <- fit_GPD_MLE(excess_sek_eur)) # MLE
shape.u_sek_eur <- fit_sek_eur$par[["shape"]]
scale.u_sek_eur <- fit_sek_eur$par[["scale"]]
### 5. Fit a GPD to Treasury excesses #######################################
exceed_treasury <- treasury_log_return$perc_loss[treasury_log_return$perc_loss > treasury_threshold_subsequent] # exceedances
excess_treasury <- exceed_treasury - treasury_threshold_subsequent # excesses
(fit_treasury <- fit_GPD_MLE(excess_treasury)) # MLE
shape.u_treasury <- fit_treasury$par[["shape"]]
scale.u_treasury <- fit_treasury$par[["scale"]]
gpd(brent_crude_log_return$perc_loss, brent_threshold)
sprintf(omxs30_threshold, "(", k, ")")
sprintf(omxs30_threshold, "(", omxs30_threshold, ")")
paste(omxs30_threshold, "(", omxs30_threshold, ")", sep="")
paste(omxs30_threshold, " (", omxs30_threshold, ")", sep="")
gpd(brent_crude_log_return$perc_loss, brent_threshold)
gpdfitomxs30 <- gpd(omxs30_log_return$perc_loss, omxs30_threshold)
gpdfitomxs30$par.ses
gpdfitomxs30$par.ses[1,]
gpdfitomxs30$par.ses[,1]
gpdfitomxs30$par.ses[1]
gpdfitomxs30$par.ses[1]
xi_se_omxs30 <- gpdfitomxs30$par.ses[1]
xi_se_omxs30
xi_se_omxs30
xi_se_omxs30[1]
shape.u_bitcoin
paste(omxs30_threshold, " (", omxs30_threshold, ")", sep="")
gpdfitomxs30$par.ses[1]
gpdfitomxs30$par.ses[2]
library(tidyverse)
library(forecast)
library(scales)
library(readxl)
library(janitor)
library(quantmod)
library(tidyquant)
library(lubridate)
theme_set(theme_minimal())
# --------------------- BITCOIN ---------------------
# Get the bitcoin data
bitcoin <- read_xlsx("Bitcoin.xlsx", 2) %>%
clean_names() %>%                                         # Clean names
mutate(log_return = c(diff(log(closeprice)), NA))
# Separate out log return
bitcoin_log_return <- bitcoin %>%
select(date, log_return) %>%
filter(log_return != "NA",
log_return != 0) %>%
mutate(neg_log_return = -log_return,
perc_loss = 100*(1-exp(log_return)),
neg_perc_loss = -perc_loss)
# See https://rstudio-pubs-static.s3.amazonaws.com/78839_afca73ae18194eaf8f1b86d399dde969.html for a possible solution
# Store as a ts object for time series
# --------------------- OMXS30 ---------------------
omxs30 <- read_xlsx("OMXS3020y.xlsx", 3) %>%
clean_names() %>%                                         # Clean names
mutate(log_return = c(diff(log(closeprice)), NA))
omxs30_log_return <- omxs30 %>%
select(date, log_return) %>%
filter(log_return != "NA",
log_return != 0) %>%
mutate(neg_log_return = -log_return,
perc_loss = 100*(1-exp(log_return)),
neg_perc_loss = -perc_loss)
# Store as a ts object for time series
# --------------------- Brent Crude ---------------------
brent_crude <- read_xlsx("LCOc1-Brent Crude.xlsx", 2) %>%
clean_names() %>%                                         # Clean names
mutate(log_return = c(diff(log(closeprice)), NA))
brent_crude_log_return <- brent_crude %>%
select(date, log_return) %>%
filter(log_return != "NA",
log_return != 0) %>%
mutate(neg_log_return = -log_return,
perc_loss = 100*(1-exp(log_return)),
neg_perc_loss = -perc_loss)
# --------------------- SEK/EUR ---------------------
sek_eur <- read_xlsx("SEKEUR-SEK_EUR.xlsx", 2) %>%
clean_names() %>%                                         # Clean names
mutate(log_return = c(diff(log(closeprice)), NA))
sek_eur_log_return <- sek_eur %>%
select(date, log_return) %>%
filter(log_return != "NA",
log_return != 0) %>%
mutate(neg_log_return = -log_return,
perc_loss = 100*(1-exp(log_return)),
neg_perc_loss = -perc_loss)
# --------------------- US 10 year treasury ---------------------
#t10y <- getSymbols(Symbols = "DGS10", src = "FRED", auto.assign = #FALSE)
#t10yd <- data.frame(date = index(t10y), coredata(t10y))
#treasury <- t10yd %>%
#  rename("price" = "DGS10") %>%
#  filter(date >= "2001-04-23" & date <= "2021-04-23") %>%
#  mutate(log_return = c(diff(log(price)), NA))
#treasury_log_return <- treasury %>%
#  select(date, log_return) %>%
#  filter(log_return != "NA",
#         log_return != 0) %>%
#  mutate(neg_log_return = -log_return,
#         perc_loss = 100*(1-exp(log_return)),
#         neg_perc_loss = -perc_loss)
treasury <- read_xlsx("OMRXBOND.xlsx") %>%
rename("price" = "close") %>%
filter(date <= "2021-04-23") %>%
mutate(price = as.numeric(price),
log_return = c(diff(log(price)), NA))
treasury_log_return <- treasury %>%
select(date, log_return) %>%
filter(log_return != "NA",
log_return != 0) %>%
mutate(neg_log_return = -log_return,
perc_loss = 100*(1-exp(log_return)),
neg_perc_loss = -perc_loss)
library(qrmtools)
### FITTING A GPD TO EACH SERIES ###############################################
### Set the thresholds based on mean excess plots ##############################
omxs30_threshold <- 1
bitcoin_threshold <- 0.25
brent_threshold <- 2.3
sek_eur_threshold <- 0.82
treasury_threshold <- 2.25
treasury_threshold_subsequent <- 0.25
### 1. Fit a GPD to OMXS30 excesses ############################################
exceed_omxs30 <- omxs30_log_return$perc_loss[omxs30_log_return$perc_loss > omxs30_threshold] # exceedances
excess_omxs30 <- exceed_omxs30 - omxs30_threshold # excesses
(fit_omxs30 <- fit_GPD_MLE(excess_omxs30)) # MLE
shape.u_omxs30 <- fit_omxs30$par[["shape"]]
scale.u_omxs30 <- fit_omxs30$par[["scale"]]
### Extract SE for the parameters and the percentage of exceedances
gpdfitomxs30 <- gpd(omxs30_log_return$perc_loss, omxs30_threshold)
xi_se_omxs30 <- gpdfitomxs30$par.ses[1]
beta_se_omxs30 <- gpdfitomxs30$par.ses[2]
### 2. Fit a GPD to Bitcoin excesses ###########################################
exceed_bitcoin <- bitcoin_log_return$perc_loss[bitcoin_log_return$perc_loss > bitcoin_threshold] # exceedances
excess_bitcoin <- exceed_bitcoin - bitcoin_threshold # excesses
(fit_bitcoin <- fit_GPD_MLE(excess_bitcoin)) # MLE
shape.u_bitcoin <- fit_bitcoin$par[["shape"]]
scale.u_bitcoin <- fit_bitcoin$par[["scale"]]
### 3. Fit a GPD to Brent crude excesses #######################################
exceed_brent <- brent_crude_log_return$perc_loss[brent_crude_log_return$perc_loss > brent_threshold] # exceedances
excess_brent <- exceed_brent - brent_threshold # excesses
(fit_brent <- fit_GPD_MLE(excess_brent)) # MLE
shape.u_brent <- fit_brent$par[["shape"]]
scale.u_brent <- fit_brent$par[["scale"]]
### 4. Fit a GPD to SEK/EUR excesses #######################################
exceed_sek_eur <- sek_eur_log_return$perc_loss[sek_eur_log_return$perc_loss > sek_eur_threshold] # exceedances
excess_sek_eur <- exceed_sek_eur - sek_eur_threshold # excesses
(fit_sek_eur <- fit_GPD_MLE(excess_sek_eur)) # MLE
shape.u_sek_eur <- fit_sek_eur$par[["shape"]]
scale.u_sek_eur <- fit_sek_eur$par[["scale"]]
### 5. Fit a GPD to Treasury excesses #######################################
exceed_treasury <- treasury_log_return$perc_loss[treasury_log_return$perc_loss > treasury_threshold_subsequent] # exceedances
excess_treasury <- exceed_treasury - treasury_threshold_subsequent # excesses
(fit_treasury <- fit_GPD_MLE(excess_treasury)) # MLE
shape.u_treasury <- fit_treasury$par[["shape"]]
scale.u_treasury <- fit_treasury$par[["scale"]]
library(evir)
gpdfitomxs30 <- gpd(omxs30_log_return$perc_loss, omxs30_threshold)
gpdfitomxs30$p.less.thresh
gpdfitbitcoin <- gpd(bitcoin_log_return$perc_loss, bitcoin_threshold)
xi_se_bitcoin <- gpdfitbitcoin$par.ses[1]
beta_se_bitcoin <- gpdfitbitcoin$par.ses[2]
xi_se_bitcoin
beta_se_bitcoin
gpdfitbrent <- gpd(brent_crude_log_return$perc_loss, brent_threshold)
xi_se_brent <- gpdfitbrent$par.ses[1]
beta_se_brent <- gpdfitbrent$par.ses[2]
xi_se_brent
gpdfitsek <- gpd(sek_eur_log_return$perc_loss, sek_eur_threshold)
xi_se_sek <- gpdfitsek$par.ses[1]
beta_se_sek <- gpdfitsek$par.ses[2]
(fit_sek_eur <- fit_GPD_MLE(excess_sek_eur)) # MLE
gpdfitsek
gpdfittreasury <- gpd(treasury_log_return$perc_loss, treasury_threshold)
gpdfittreasury <- gpd(treasury_log_return$perc_loss, treasury_threshold_subsequent)
xi_se_treasury <- gpdfittreasury$par.ses[1]
beta_se_treasury <- gpdfittreasury$par.ses[2]
gpdfitbitcoin
gpdfitbitcoin$p.less.thresh
gpdfittreasury$p.less.thresh
length(bitcoin_log_return$perc_loss)
105/3466
1-(105/3466)
length(omxs30_log_return$perc_loss)
gpdfitomxs30$n.exceed
gpdfitomxs30$p.less.thresh
1-(907/5014)
sprintf("%.3f", 0.8191065)
sprintf("%.3f", gpdfitbitcoin$p.less.thresh)
sprintf("%.3f", gpdfitomxs30$p.less.thresh)
sprintf("%.3f", 1-gpdfitomxs30$p.less.thresh)
